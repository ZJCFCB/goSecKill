// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: seckill.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecKillService_SecKill_FullMethodName = "/SecKillService/secKill"
)

// SecKillServiceClient is the client API for SecKillService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecKillServiceClient interface {
	SecKill(ctx context.Context, in *SecRequest, opts ...grpc.CallOption) (*SecResponse, error)
}

type secKillServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecKillServiceClient(cc grpc.ClientConnInterface) SecKillServiceClient {
	return &secKillServiceClient{cc}
}

func (c *secKillServiceClient) SecKill(ctx context.Context, in *SecRequest, opts ...grpc.CallOption) (*SecResponse, error) {
	out := new(SecResponse)
	err := c.cc.Invoke(ctx, SecKillService_SecKill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecKillServiceServer is the server API for SecKillService service.
// All implementations must embed UnimplementedSecKillServiceServer
// for forward compatibility
type SecKillServiceServer interface {
	SecKill(context.Context, *SecRequest) (*SecResponse, error)
	mustEmbedUnimplementedSecKillServiceServer()
}

// UnimplementedSecKillServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecKillServiceServer struct {
}

func (UnimplementedSecKillServiceServer) SecKill(context.Context, *SecRequest) (*SecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecKill not implemented")
}
func (UnimplementedSecKillServiceServer) mustEmbedUnimplementedSecKillServiceServer() {}

// UnsafeSecKillServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecKillServiceServer will
// result in compilation errors.
type UnsafeSecKillServiceServer interface {
	mustEmbedUnimplementedSecKillServiceServer()
}

func RegisterSecKillServiceServer(s grpc.ServiceRegistrar, srv SecKillServiceServer) {
	s.RegisterService(&SecKillService_ServiceDesc, srv)
}

func _SecKillService_SecKill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServiceServer).SecKill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKillService_SecKill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServiceServer).SecKill(ctx, req.(*SecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecKillService_ServiceDesc is the grpc.ServiceDesc for SecKillService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecKillService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SecKillService",
	HandlerType: (*SecKillServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "secKill",
			Handler:    _SecKillService_SecKill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seckill.proto",
}
